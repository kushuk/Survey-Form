 /**
 greater specificity than class + pseudoclass. Let’s fix it:
**/
<style>
  p {
    color: blue;
  }

  #last {
    color: red;
  }
  
  p:hover {
    color: green;
  }
  
  #last:hover {
    color: green;
  }
</style>

<p>first</p>
<p>second</p>
<p id="last">third</p>

/**
Now it works. But there’s another requirement: 
The text color should be yellow instead of green when hovering over. Easy:
**/

<style>
  p {
    color: blue;
  }

  #last {
    color: red;
  }
  
  p:hover {
    color: yellow;
  }
  
  #last:hover {
    color: green;
  }
</style>

<p>first</p>
<p>second</p>
<p id="last">third</p>

/**
!!!!. Last paragraph is still green. The rule for hovering is in two places: one for p and one for #last . 
We need to change the latter as well:
**/

<style>
  p {
    color: blue;
  }

  #last {
    color: red;
  }
  
  p:hover {
    color: yellow;
  }
  
  #last:hover {
    color: yellow;
  }
</style>

<p>first</p>
<p>second</p>
<p id="last">third</p>

/**********
Conclusion: We’ve had 3 elements and two new requirements. In both implementations we had to do some debugging to make it work. 
What if there were hundreds of elements to look after? 

This way of coding does not scale and is counter-productive.
Let’s use BEM methodology instead:
**********/

<style>
  :root {
    --color-primary: blue;
    --color-complement: green;
    --color-emphasis: red;
  }
  
  .discussion__opinion   {
    color: var(--color-primary);
  }
  
  .discussion__opinion:hover {
    color: var(--color-complement);
  }
  
  .discussion__opinion--significant {
    color: var(--color-emphasis);
  }
</style>

<div class="discussion">
  <p class="discussion__opinion">first</p>
  <p class="discussion__opinion">second</p>
  <p class="discussion__opinion discussion__opinion--significant">third</p>
</div>